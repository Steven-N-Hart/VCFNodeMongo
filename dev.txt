Notes for steps I need to take for query generator

q='STATUS'

#Get arrays of sample groups
//SID1=['559a9bb5efeea832eafa8520','559a9bb5efeea832eafa8521']
//SID2=['55b1b2d33daa7a9f4c44385b']

db.meta.aggregate(
   [
      {$group:{_id:"$"+q,samples:{$push:"$sample_id"}}}
   ]
)

#Get annotations to filter on


db.variants.aggregate([
    { "$unwind": "$samples" },
    { "$group": {
        "_id": {
           "chr": "$chr",
           "pos": "$pos",
           "ref": "$ref",
           "alt": "$alt"
        },
        "SID1": {
            "$sum": {
                "$cond": [
                    { "$setIsSubset": [
                        { "$map": { 
                            "input": { "$literal": ["A"] },
                            "as": "el",
                            "in": "$samples.sample_id"
                        }},
                        SID1
                    ]},
                    "$samples.GTC",
                    0
                ]
            }
        },
        "SID2": {
            "$sum": {
                "$cond": [
                    { "$setIsSubset": [
                        { "$map": { 
                            "input": { "$literal": ["A"] },
                            "as": "el",
                            "in": "$samples.sample_id"
                        }},
                        SID2
                    ]},
                    "$samples.GTC",
                    0
                ]
            }
        },
    }}
])












Third Party Dependencies:

    CommandLine Parsing
    https://github.com/tj/commander.js



Goals:
    Make setup & Install as easy as possible.

    Write good quality code: JSHint
    http://blog.teamtreehouse.com/improving-code-quality-jshint




Notes:

Avoid Mongoose:
http://codeandcodes.com/tag/mongoose-vs-mongodb-native/
 It turns out that the overhead that mongoose adds for wrapping mongoDB documents within mongooseâ€™s ORM is tremendous. Well, I should say tremendous for our use case.

Mongo Query Performance:
   Finding Something:  https://blog.serverdensity.com/checking-if-a-document-exists-mongodb-slow-findone-vs-find/
       Collection.findOne(que) => slow
       Collection.find(que).limit(1).exec() => fast
